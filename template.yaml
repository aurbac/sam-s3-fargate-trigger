AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-s3-fargate-trigger

  Sample SAM Template for sam-s3-fargate-trigger

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Parameters:
  SubnetId01:
    Type: String
    Description: Subnet Id 01 for containers
  SubnetId02:
    Type: String
    Description: Subnet Id 02 for containers
  SecurityGroupId:
    Type: String
    Description: Security Group Id for containers

Resources:

  MyBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-load-files'
    
  Values:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: "key_name"
        AttributeType: "S"
      KeySchema:
      - AttributeName: "key_name"
        KeyType: "HASH"
      BillingMode: "PAY_PER_REQUEST"
      SSESpecification:
        SSEEnabled: True
    
    
  LoadFilesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: code/load_files/
      Handler: app.lambda_handler
      Runtime: python3.8
      Tracing: Active
      Environment:
        Variables:
          CLUSTER_NAME: !Sub '${AWS::StackName}-cluster'
          TASK_ROLE_ARN: !GetAtt TaskRole.Arn
          TABLE_VALUES: !Ref Values
          TASK_DEFINITION: !Ref LoadFileTaskDefinition
          SUBNET_ID_01: !Ref SubnetId01
          SUBNET_ID_02: !Ref SubnetId02
          SECURITY_GROUP_ID: !Ref SecurityGroupId
      Timeout: 900
      MemorySize: 10240
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Values
        - AWSLambdaExecute
        - Version: '2012-10-17' 
          Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectACL
              Resource: !Sub 'arn:aws:s3:::${AWS::StackName}-load-files/*'
        - Version: '2012-10-17' 
          Statement:
            - Effect: Allow
              Action:
                - ecs:*
                - iam:PassRole
              Resource: '*'
      Events:
        LoadFileEvent:
          Type: S3
          Properties:
            Bucket: !Ref MyBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: ".csv"
                    
  # CLOUDWATCH LOG GROUP

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 365

  # CLUSTER FOR CONTAINERS

  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Sub '${AWS::StackName}-cluster'
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
        - CapacityProvider: FARGATE_SPOT
          Weight: 1

  TaskExecutionRole:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - ecs-tasks.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        Path: /
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  # CONTAINER FOR LOAD FILE
          
  MyRepository: 
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: !Sub '${AWS::StackName}-load-files-repository'
      ImageScanningConfiguration: 
        ScanOnPush: "true"
        
  TaskRole:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - ecs-tasks.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        Path: /
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        Policies: 
          - PolicyName: AccessS3
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - s3:PutObject
                    - s3:GetObject
                    - s3:GetObjectACL
                  Resource: !Sub 'arn:aws:s3:::${AWS::StackName}-load-files/*'
          - PolicyName: AccessDynamoDB
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:BatchWriteItem
                    - dynamodb:CreateTable
                    - dynamodb:DescribeTable
                    - dynamodb:UpdateItem
                    - dynamodb:GetItem
                  Resource: '*'
                  
  LoadFileTaskDefinition: 
    Type: AWS::ECS::TaskDefinition
    Properties: 
      TaskRoleArn: !GetAtt TaskRole.Arn
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      NetworkMode: 'awsvpc'
      Cpu: 4096
      Memory: 16384
      RequiresCompatibilities:
        - "FARGATE"
      ContainerDefinitions: 
        - 
          Name: "container"
          Image: !GetAtt MyRepository.RepositoryUri
          Cpu: 4096
          Memory: 16384
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Sub '${AWS::StackName}-load-files'


Outputs:
  S3FilesBucket:
    Description: "Amazon S3 bucket name - Files"
    Value: !Select [5, !Split [":", !GetAtt MyBucket.Arn]]